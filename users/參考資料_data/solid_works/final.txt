#include <Servo.h>
#define START_CMD_CHAR '*'
#define END_CMD_CHAR '#'
#define DIV_CMD_CHAR '|'
#define CMD_DIGITALWRITE 10
#define CMD_ANALOGWRITE 11
#define CMD_TEXT 12
#define CMD_READ_ARDUDROID 13
#define MAX_COMMAND 20  // max command number code. used for error checking.
#define MIN_COMMAND 10  // minimum command number code. used for error checking. 
#define IN_STRING_LENGHT 40
#define MAX_ANALOGWRITE 255
#define PIN_HIGH 3
#define PIN_LOW 2

String inText;
Servo servoX1, servoY1, servoX2, servoY2, myservo, Direction;
int val, posX1, posY1, posX2, posY2, pos;

void setup() {
Serial.begin(9600);
Serial.println("ArduDroid 0.12 Alpha by TechBitar (2013)");
Serial.flush();
// 設定伺服馬達的接腳
servoX1.attach(11);
servoY1.attach(10);
servoX2.attach(9);
servoY2.attach(6);
myservo.attach(5);
Direction.attach(3);
stop();
}

void loop()
{
  Serial.flush();
  int ard_command = 0;
  int pin_num = 0;
  int pin_value = 0;

  char get_char = ' '; 

  // 接收訊號
  if (Serial.available() < 1) return; 

  // parse incoming command start flag 
  get_char = Serial.read();
  if (get_char != START_CMD_CHAR) return;

  //判別模式：接收字元、數位、類比、發送字元
  ard_command = Serial.parseInt(); 
  
  // 讀入腳位與訊號 
  pin_num = Serial.parseInt(); 
  pin_value = Serial.parseInt(); 

  // 1) GET TEXT COMMAND FROM ARDUDROID
  if (ard_command == CMD_TEXT){   
    inText =""; //clears variable for new input   
    while (Serial.available())  {
      char c = Serial.read();  //gets one byte from serial buffer
      delay(5);
      if (c == END_CMD_CHAR) { // if we the complete string has been read
        // add your code here
        break;
      }              
      else {
        if (c !=  DIV_CMD_CHAR) {
          inText += c; 
          delay(5);
        }
      }
    }
  }

  // 2) GET digitalWrite DATA FROM ARDUDROID
  if (ard_command == CMD_DIGITALWRITE){  
    if (pin_value == PIN_LOW) pin_value = LOW;
    else if (pin_value == PIN_HIGH) pin_value = HIGH;
    else return;
    set_digitalwrite( pin_num,  pin_value); 
    return; 
  }

  // 3) GET analogWrite DATA FROM ARDUDROID
  /*if (ard_command == CMD_ANALOGWRITE) {  
    analogWrite(  pin_num, pin_value*4.01 ); 
    return;
  }*/
   if (ard_command == CMD_ANALOGWRITE) {  
    switch (pin_num) {
      case 11:
        val = pin_value*4.01;
        posX1 = map(val, 0, 1023, 0, 179);
        servoX1.write(posX1);
        break;
      case 10:
        val = pin_value*4.01;
        posY1 = map(val, 0, 1023, 0, 179);
        servoY1.write(posY1);
        break;
      case 9:
        val = pin_value*4.01;
        posX2 = map(val, 0, 1023, 0, 179);
        servoX2.write(posX2);
        break;
      case 6:
        val = pin_value*4.01;
        posY2 = map(val, 0, 1023, 0, 179);
        servoY2.write(posY2);
        break;
       case 3:
        val = pin_value*4.01;
        pos = map(val, 0, 1023, 0, 179);
        Direction.write(pos);
        break;     
    }
    return; 
  }

  // 4) SEND DATA TO ARDUDROID
  if (ard_command == CMD_READ_ARDUDROID) { 
    // char send_to_android[] = "Place your text here." ;
    // Serial.println(send_to_android);   // Example: Sending text
    Serial.print(" Analog 0 = "); 
    Serial.println(analogRead(A0));  // Example: Read and send Analog pin value to Arduino
    return; 
  }
}

void set_digitalwrite(int pin_num, int pin_value)
{
  switch (pin_num) {
  case 13:
    pinMode(13, OUTPUT);
    digitalWrite(13, pin_value);       
    break;   
  case 12:
    pinMode(12, OUTPUT);
    digitalWrite(12, pin_value);     
    break;  
  case 11:
    pinMode(11, OUTPUT);
    digitalWrite(11, pin_value);         
    break;  
  case 10:
    pinMode(10, OUTPUT);
    digitalWrite(10, pin_value);         
    break;   
  case 9:
    pinMode(9, OUTPUT);
    digitalWrite(9, pin_value);         
    break;
  case 8:
    pinMode(8, OUTPUT);
    digitalWrite(8, pin_value);          
    break;   
  case 7:
    pinMode(7, OUTPUT);
    digitalWrite(7, pin_value);         
    break;   
  case 6:
    pinMode(6, OUTPUT);
    digitalWrite(6, pin_value);         
    break;    
  case 5:
    pinMode(5, OUTPUT);
    digitalWrite(5, pin_value);    
    break;   
  case 4:
    pinMode(4, OUTPUT);
    digitalWrite(4, pin_value); 
    stop();    
    break;  
  case 3:
    pinMode(3, OUTPUT);
    digitalWrite(3, pin_value);         
    backward();
    break;   
  case 2:
    pinMode(2, OUTPUT);
    digitalWrite(2, pin_value); 
    forward();       
    break;      
  } 
}

void forward(){
int d=0;
 myservo.write(d);
}

void backward(){
int d=180;
 myservo.write(d);
}

void stop(){
int d=88;
 myservo.write(d);
}